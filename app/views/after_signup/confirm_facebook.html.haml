- title "Sign up"
.row
  .col-md-6.col-md-offset-3
    .panel.panel-default
      .panel-heading Signup
      = render 'layouts/messages'
      .panel-body#panel-body
        = simple_form_for(@profile, url: wizard_path, validate: true, html: { multipart: true}) do |f|

          = f.error_notification
          .form-inputs
            %p Profile picture
            .fileinput.fileinput-new{"data-provides" => "fileinput"}
              .fileinput-new.thumbnail{:style => "width: 200px; height: 200px;"}
                - if @profile.avatar?
                  = image_tag(@profile.avatar.url, id: "edit-profile-avatar")
                -else
                  %img{"src" => "https://robohash.org/facebook.png"}
              .fileinput-preview.fileinput-exists.thumbnail{:style => "max-width: 200px; max-height: 200px;"}
              %div
                %span.btn.btn-default.btn-file
                  %span.fileinput-new Select image
                  %span.fileinput-exists Change
                  = f.file_field :avatar
                %a.btn.btn-default.fileinput-exists{"data-dismiss" => "fileinput", :href => "#"} Remove
            %hr
            
            = f.input :username, required: true, uniqueness: true, label: false, placeholder: "Username", input_html: { class: "input-lg"}

            = f.input :first_name, label: false, required: true, placeholder: "First name", input_html: { class: "input-lg"}
            = f.input :last_name, label: false, placeholder: "Last name", input_html: { class: "input-lg"}

            %hr
            //////Skills///////////////
            = f.simple_fields_for :profile_skills, validate: true, required: true do |s|
              = s.input :skill_name, label: "Skill Name", hint: "Programming language or framework (e.g. python, ruby on rails)", required: true, label: false, input_html: { class: "input-lg"}
              = s.input :experience_years, as: :integer, placeholder: "Experience (years)", required: true, label: false, input_html: { class: "input-lg"}
            ///////////////////////////
            %hr
            // address ///////////////////
            #address-map
            %br
            %label Address
            .input-group.input-group-lg
              %span.input-group-btn
                %button.btn.btn-default.ion-search{id: "btn-search", :type => "button"}
              = f.input :address, :input_html => {class: "input-lg"}, label: false, required: true
              %span.input-group-btn
                %button.btn.btn-default.ion-navigate{id: "gps", :type => "button"}
            = f.input :latitude, as: :hidden
            = f.input :longitude, as: :hidden
            ///////////////////////////
            %br
            = f.input :age, required: true, class:"form-control", label: "Year of birth"
            = f.input :gender, label: 'What is your gender?', collection: [ ['Male', true ], ['Female', false] ], as: :radio_buttons
          .form-actions
            = f.button :submit,"Sign Up", class: "btn btn-itunes-inversed btn-lg btn-block"

:scss
  #address-map{
    height: 200px;
    width: 100%;
  }

:javascript

    $("#profile_address").geocomplete();

    (function(window, google, mapster) {

      var options = mapster.address_map;
      element = document.getElementById("address-map");
      map = new google.maps.Map(element, options);
      var marker = new google.maps.Marker({
        map: map,
        draggable:true,
        icon: '/images/red_marker.png',
      });


      function onGeoSuccess(location) {
        map.setCenter(new google.maps.LatLng(location.coords.latitude, location.coords.longitude));
        marker.setPosition(new google.maps.LatLng(location.coords.latitude, location.coords.longitude));
        $('#profile_address').val(location.formattedAddress);
        $('#profile_latitude').val(marker.getPosition()["D"]);
        $('#profile_longitude').val(marker.getPosition()["k"]);
      }

      function onGeoError(error) {}

      $("#gps").click(function() {
        var html5Options = { enableHighAccuracy: true, timeout: 6000, maximumAge: 0 };
        geolocator.locate(onGeoSuccess, onGeoError, true, html5Options);
      });

      $(function() {
        var html5Options = { enableHighAccuracy: true, timeout: 6000, maximumAge: 0 };
        geolocator.locate(onGeoSuccess, onGeoError, true, html5Options);
      });

      $("#btn-search").click(function() {
        var geocoder = new google.maps.Geocoder();
        var address = $('#profile_address').val();
        geocoder.geocode( { 'address': address }, function(results, status) {
          map.setCenter(results[0].geometry.location);
          marker.setPosition(results[0].geometry.location);
        });
        $('#profile_latitude').val(marker.getPosition()["D"]);
        $('#profile_longitude').val(marker.getPosition()["k"]);
      });

      google.maps.event.addListener(marker, 'dragend', function(event)
      {
        $('#profile_latitude').val(marker.getPosition()["D"]);
        $('#profile_longitude').val(marker.getPosition()["k"]);
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({
          "latLng":event.latLng
        }, function (results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            var lat = results[0].geometry.location.lat(),
                lng = results[0].geometry.location.lng(),
                placeName = results[0].formatted_address,
                latlng = new google.maps.LatLng(lat, lng);
            $('#profile_address').val(placeName);
          }
        });
        $('#profile_latitude').val(marker.getPosition()["D"]);
        $('#profile_longitude').val(marker.getPosition()["k"]);
      });


      google.maps.event.addListener(map, 'click', function (event) {
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({
          "latLng":event.latLng
        }, function (results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            var lat = results[0].geometry.location.lat(),
                lng = results[0].geometry.location.lng(),
                placeName = results[0].formatted_address,
                latlng = new google.maps.LatLng(lat, lng);
            $('#profile_latitude').val(lat);
            $('#profile_longitude').val(lng);
            $('#profile_address').val(placeName);
            marker.setPosition(latlng);
            $("#searchTextField").val(results[0].formatted_address);
          }

        });
      });

    }(window, google, window.Mapster || (window.Mapster = {})));


  $('[id$=skill_name]').selectize({
    maxItems: 1,
    valueField: 'name',
    labelField: 'name',
    searchField: 'name',
    create: true,
    render: {
      option: function(item, escape) {
        var actors = [];
        for (var i = 0, n = item.length; i < n; i++) {
          actors.push('<span>' + escape(item.autocompletes[i].name) + '</span>');
        }

        return '<div>' +
                  '<span class="name">' + escape(item.name) + '</span>' +
               '</div>';
      }
    },
    load: function(query, callback) {
      if (!query.length) return callback();
      $.ajax({
        url: '/autocompletes/skill.json',
        type: 'GET',
        dataType: 'json',
        data: {
          q: query,
        },
        error: function() {
          callback();
        },
        success: function(res) {
          callback(res.autocompletes);
        }
      });
    }
  });
